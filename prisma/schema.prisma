// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserType {
  USER
  LANDLORD
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // STALS
  type           UserType @default(USER)
  username       String?
  password       String?
  first_name     String?
  middle_name    String?
  last_name      String?
  Suffix         String?
  contact_number String?
  email_address  String?
  is_visible     Boolean?

  Report        Report[]
  Review        Review[]
  Accommodation Accommodation[]
  Favorite      Favorite[]
}

enum AccommodationType {
  HOTEL
  DORMITORY
  APARTMENT
  BEDSPACER
  TRANSIENT
}

model Accommodation {
  id              String  @id @default(cuid())
  name            String
  address         String? // TODO: remove
  street_number   String?
  subdivision     String?
  barangay        String? // TODO: required
  location        String
  landlordUser    User    @relation(fields: [landlord], references: [id], onDelete: Cascade)
  landlord        String
  contract_length String?
  contact_number  String
  tags            String
  num_of_rooms    Int
  is_archived     Boolean
  fb_page         String?
  price           Float?
  average_rating  Float?
  total_reviews   Int?
  tagArray        Json? // TODO: required
  typeArray       Json? // TODO: required

  Review Review[]
  Room   Room[]
  Favorite Favorite[]
  type   AccommodationType

  @@index([landlord])
}

model Room {
  id              String        @id @default(cuid())
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId String

  occupied       Boolean
  price          Float
  num_of_beds    Int
  with_aircon    Boolean
  with_utilities Boolean

  is_archived Boolean

  @@index([accommodationId])
}

enum TypeReported {
  ACCOMMODATION
  USER
}

model Report {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type_reported String
  reported_id   String
  reported_name String?
  report        String

  @@index([userId])
}

model Review {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId String
  is_archived     Boolean?
  rating          Int
  review          String?
  date            String?
  time            String?

  @@index([accommodationId])
  @@index([userId])
}

model Favorite {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  accommodationId String

  @@index([accommodationId])
  @@index([userId])
}