// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // STALS
  subtype        Int?
  username       String?
  password       String?
  first_name     String?
  middle_name    String?
  last_name      String?
  contact_number Int?
  email_address  String?
  is_visible     Boolean?

  Report         Report[]
  Review         Review[]
}

model Accomodation {
  id             String   @id @default(cuid())
  name           String
  address        String
  location       String
  landlord       String
  contact_number Int
  tags           String
  num_of_rooms   Int
  rooms          String
  is_archived    Boolean
  fb_page        String?

  Review         Review[]
  Room           Room[]
}

model Room {
  id              String       @id @default(cuid())
  accommodation   Accomodation @relation(fields: [accommodationId], references: [id])
  accommodationId String

  occupied       Boolean
  price          Float
  num_of_beds    Int
  with_aircon    Boolean
  with_utilities Boolean

  is_archived    Boolean

  @@index([accommodationId])
}

model Report {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  type_reported String
  reported_id   String
  report        String

  @@index([userId])
}

model Review {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  accommodation   Accomodation @relation(fields: [accommodationId], references: [id])
  accommodationId String

  rating Int
  review String?

  @@index([accommodationId])
  @@index([userId])
}
